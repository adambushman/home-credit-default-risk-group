---
title: "Duck DB Examples with R"
subtitle: "Demonstrating how to use DuckDB with R for data analysis and processing tasks"
author: "Adam Bushman"
format:
    html:
        embed-resources: true
---


## Using DuckDB

There's two primary ways to use DuckDB:

1.  As a DB client connection
2.  Using the `{duckplyr}` package

Let's demonstrate both. For each example, we'll need data and the `{duckdb}` R package.

```{r}
#| warning: false
#| error: false
# install.packages('duckdb')
library('duckdb')
```

```{r}
faang_searches <- data.frame(
    company = sample(c("Apple", "Amazon", "Google", "Facebook", "Netflix"), 1e6, replace = TRUE), 
    searches = rnorm(1e6, 1e7, 5e6)
)
```


### DB Client Connection

All we need to do is setup a "connection" and register the data:

```{r}
# Connection
con <- dbConnect(duckdb())

# Registration
duckdb_register(con, "faang", faang_searches)
```

```{r}
# Query
res <- dbGetQuery(con, "
    SELECT DISTINCT company
    FROM faang
")

# Print results
res
```


### `{duckplyr}`

We first install/load the `{duckplyr}` package:

```{r}
#| warning: false
#| error: false
# install.packages('duckplyr')
library('duckplyr')
library('dplyr')
```

Now, we can use similar commands as native `{dplyr}`:

```{r}
faang_searches |>
    duckplyr::as_duckplyr_tibble() |>
    summarise(
        med = median(searches)
    )
```

## Appendix

[Full documentation of DuckDB](https://duckdb.org/docs/sql/statements/overview.html)

[Full documentation of {duckplyr}](https://duckplyr.tidyverse.org/)